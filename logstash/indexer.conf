input {

 lumberjack {
   port => 5043
   type => "iis"
   ssl_certificate => "/etc/ssl/certs/logstash-forwarder.crt"
   ssl_key => "/etc/ssl/private/logstash-forwarder.key"
 }

 syslog {
   type => "haproxy"
   port => 5544
 }

}

filter {

 if [message] =~ "^#" {
   drop {}
  }

 if [type] == "haproxy" {

 grok {
  match => [ "message", "%{IPORHOST:clienthost}:%{WORD:clientport} \[%{DATA:requestDate}\] %{IPORHOST:frontend_name} %{IPORHOST:backend_name}/%{WORD:server_name} %{INT:clientWait}/%{INT:time_queue}/%{INT:time_request} %{INT:bytes_read} -- %{INT:actconn}/%{INT:beconn}/%{INT:feconn}/%{INT:srvconn}/%{INT:retries} %{INT:srv_queue}/%{INT:backend_queue}" ]
  named_captures_only => true
}
}


else
{
grok {

  match => ["message", "%{DATESTAMP:log_timestamp} %{IPORHOST:site} %{WORD:method} /Handlers/%{WORD:function}.aspx %{NOTSPACE:querystring} %{NUMBER:port} %{NOTSPACE:username} %{IPORHOST:clienthost} %{NOTSPACE:useragent} %{NOTSPACE:unk} %{NUMBER:response} %{NUMBER:subresponse} %{NUMBER:scstatus} %{NUMBER:timetaken}"]
}

date { match => [ "log_timestamp", "YY-MM-dd HH:mm:ss" ] }

grok {
match => ["log_timestamp", "%{INT:yr}-%{INT:mo}-%{INT:dy} %{INT:hr}"]
}

}
} 
output {

 elasticsearch {
  host => "127.0.0.1"
  index => "iis-%{+YYYY.MM.dd}"
  type => "iisprod"
 }

statsd {
    type => "haproxy"
    count => [
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.response_size", "%{bytes_read}"
    ]
    increment => [
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.hits",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.responses.%{http_status_code}"
    ]
    timing => [
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.response_time", "%{time_duration}",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.queue_time", "%{time_queue}",
      "haproxy.backend.%{backend_name}.connect_time", "%{time_backend_connect}",
      "haproxy.backend.%{backend_name}.response_time", "%{time_backend_response}",
      "haproxy.backend.%{backend_name}.queue", "%{backend_queue}",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.request_time", "%{time_request}",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.retries", "%{retries}",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.queue", "%{srv_queue}",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.active_connections", "%{actconn}",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.backend_connections", "%{beconn}",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.frontend_connections", "%{feconn}",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.server_connections", "%{srvconn}",
      "haproxy.%{frontend_name}.%{backend_name}.%{server_name}.response_size", "%{bytes_read}"
    ]
  }

 graphite { 
	host => "127.0.0.1"
	port => 2023
	type => "iis"
	metrics => ["com.tmobile.fe.%{host}.%{function}.%{response}.count", 1, "com.tmobile.fe.%{host}.%{function}.%{response}.duration", "%{timetaken}" ]
 }
}
